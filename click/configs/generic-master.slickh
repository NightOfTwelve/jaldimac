// JaldiMAC Click configuration for the master

// ======================================================
// Configuration
// ======================================================

// Click port names
#define $STATION_1_BULK 0
#define $STATION_1_VOIP 1
#define $STATION_2_BULK 2
#define $STATION_2_VOIP 3
#define $STATION_3_BULK 4
#define $STATION_3_VOIP 5
#define $STATION_4_BULK 6
#define $STATION_4_VOIP 7

// ======================================================
// Components
// ======================================================

// Include shared components
#include "shared.slickh"

// Sources (one from upstream, one from downstream)
upstreamSource :: TimedSource(0.2)
downstreamSource :: TimedSource(0.9)

// Sinks (one to upstream, one to downstream)
upstreamSink :: { input -> upstreamQueue :: JaldiQueue -> TimedSink(0.1) }
downstreamSink :: { input -> downstreamQueue :: JaldiQueue -> TimedSink(0.1) }

// Other routing elements
arpReplyTee :: Tee

// Classifier
elementclass IPClassifier
{
	// For now the number of clients is fixed to 4.
	ic :: IPClassifier(dst host $HOST_IP,
			   dst host $STATION_1_IP udp port $UDP_PORT_1 or $UDP_PORT_2,
			   dst host $STATION_1_IP,
			   dst host $STATION_2_IP udp port $UDP_PORT_1 or $UDP_PORT_2,
			   dst host $STATION_2_IP,
			   dst host $STATION_3_IP udp port $UDP_PORT_1 or $UDP_PORT_2,
			   dst host $STATION_3_IP,
			   dst host $STATION_4_IP udp port $UDP_PORT_1 or $UDP_PORT_2,
			   dst host $STATION_4_IP,
			   -)

	input -> ic
	ic[0] -> $TOHOST						// Send packets for router to linux stack
	ic[1] -> DropBroadcasts -> Paint($STATION_1_VOIP) -> [$VOIP]output
	ic[2] -> DropBroadcasts -> Paint($STATION_1_BULK) -> [$BULK]output
	ic[3] -> DropBroadcasts -> Paint($STATION_2_VOIP) -> [$VOIP]output
	ic[4] -> DropBroadcasts -> Paint($STATION_2_BULK) -> [$BULK]output
	ic[5] -> DropBroadcasts -> Paint($STATION_3_VOIP) -> [$VOIP]output
	ic[6] -> DropBroadcasts -> Paint($STATION_3_BULK) -> [$BULK]output
	ic[7] -> DropBroadcasts -> Paint($STATION_4_VOIP) -> [$VOIP]output
	ic[8] -> DropBroadcasts -> Paint($STATION_4_BULK) -> [$BULK]output
	ic[9] -> DropBroadcasts -> CheckPaint($LOCALLY_ORIGINATING) -> [$OUT]output
}

ethClassifier :: EthernetClassifier
ipClassifier :: IPClassifier

// Encapsulation / decapsulation
ipToEth :: IPToEthernet
jToIP :: JaldiToIP

// Fairness
fairness :: JaldiFairness

// Scheduler
scheduler :: JaldiScheduler


// ======================================================
// Component Graph
// ======================================================

// Handle incoming Ethernet traffic
upstreamSource -> ethClassifier

ethClassifier[$ARP_QUERY] -> ProxyARP -> upstreamSink
ethClassifier[$ARP_REPLY] -> arpReplyTee
ethClassifier[$IP] -> EthernetToIP -> ipClassifier
ethClassifier[$OTHER] -> Discard

arpReplyTee[$INTERNAL] -> [$ARP_REPLY]ipToEth
arpReplyTee[$HOST] -> $TOHOST

// Handle IP traffic
downstreamSource -> jToIP

jToIP[$DATA] -> ipClassifier
jToIP[$CONTROL] -> JaldiQueue -> [$CONTROL]fairness

ipClassifier[$BULK] -> JaldiQueue -> [$BULK]fairness
ipClassifier[$VOIP] -> JaldiQueue -> [$VOIP]fairness
ipClassifier[$OUT] -> [$DATA]ipToEth

// Perform fairness and scheduling on traffic destined for stations
fairness[$BULK] -> JaldiQueue -> [$BULK]scheduler
fairness[$VOIP] -> JaldiQueue -> [$VOIP]scheduler
fairness[$CONTROL] -> JaldiQueue -> [$CONTROL]scheduler

// Outgoing traffic
ipToEth -> upstreamSink
scheduler -> downstreamSink
